// <auto-generated />
using System;
using MR.TaskTracker.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MR.TaskTracker.Persistence.Migrations
{
    [DbContext(typeof(MrDatabaseContext))]
    [Migration("20240714051033_UserSeeding")]
    partial class UserSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MR.TaskTracker.Domain.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportsToId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReportsToId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 7, 14, 10, 40, 33, 484, DateTimeKind.Local).AddTicks(1170),
                            DateModified = new DateTime(2024, 7, 14, 10, 40, 33, 484, DateTimeKind.Local).AddTicks(1200),
                            Email = "admin@mr.tasktracker.com",
                            FirstName = "A Dhaval",
                            LastName = "Kanani",
                            Password = "$2a$11$ZxHBUyn3Zd9LV.hPvDj1G.KaxpVmIDRwuX2L3G3Glqq4y8Ynk3qlq",
                            ReportsToId = 1,
                            Role = "ADMIN",
                            UserName = "admin@mr.tasktracker.com"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 7, 14, 10, 40, 33, 484, DateTimeKind.Local).AddTicks(1200),
                            DateModified = new DateTime(2024, 7, 14, 10, 40, 33, 484, DateTimeKind.Local).AddTicks(1200),
                            Email = "user1@mr.tasktracker.com",
                            FirstName = "U1 Dhaval",
                            LastName = "Kanani",
                            Password = "$2a$11$ZxHBUyn3Zd9LV.hPvDj1G.KaxpVmIDRwuX2L3G3Glqq4y8Ynk3qlq",
                            ReportsToId = 1,
                            Role = "EMPLOYEE",
                            UserName = "user1@mr.tasktracker.com"
                        });
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.TaskAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskAssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("ToStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskAssignmentId");

                    b.ToTable("TaskActions");
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.TaskAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReporterId")
                        .HasColumnType("int");

                    b.Property<decimal>("StoryPoint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ReporterId");

                    b.ToTable("TaskAssignments");
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.TaskAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ById")
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<int>("TaskAssignmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ById");

                    b.HasIndex("TaskAssignmentId");

                    b.ToTable("TaskAttachment");
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.TaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ById")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskAssignmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ById");

                    b.HasIndex("TaskAssignmentId");

                    b.ToTable("TaskComment");
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.ApplicationUser", b =>
                {
                    b.HasOne("MR.TaskTracker.Domain.ApplicationUser", "ReportsTo")
                        .WithMany("Reports")
                        .HasForeignKey("ReportsToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReportsTo");
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.TaskAction", b =>
                {
                    b.HasOne("MR.TaskTracker.Domain.TaskAssignment", "TaskAssignment")
                        .WithMany("Actions")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskAssignment");
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.TaskAssignment", b =>
                {
                    b.HasOne("MR.TaskTracker.Domain.ApplicationUser", "Assignee")
                        .WithMany("TasksAssigned")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MR.TaskTracker.Domain.ApplicationUser", "Reporter")
                        .WithMany("TasksReported")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.TaskAttachment", b =>
                {
                    b.HasOne("MR.TaskTracker.Domain.ApplicationUser", "By")
                        .WithMany()
                        .HasForeignKey("ById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MR.TaskTracker.Domain.TaskAssignment", "TaskAssignment")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("By");

                    b.Navigation("TaskAssignment");
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.TaskComment", b =>
                {
                    b.HasOne("MR.TaskTracker.Domain.ApplicationUser", "By")
                        .WithMany()
                        .HasForeignKey("ById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MR.TaskTracker.Domain.TaskAssignment", "TaskAssignment")
                        .WithMany("Comments")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("By");

                    b.Navigation("TaskAssignment");
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("TasksAssigned");

                    b.Navigation("TasksReported");
                });

            modelBuilder.Entity("MR.TaskTracker.Domain.TaskAssignment", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Attachments");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
